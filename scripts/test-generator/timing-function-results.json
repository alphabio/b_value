[
  {
    "input": "ease",
    "description": "ease keyword",
    "category": "valid-keyword",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          "ease"
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "linear",
    "description": "linear keyword",
    "category": "valid-keyword",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          "linear"
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "ease-in",
    "description": "ease-in keyword",
    "category": "valid-keyword",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          "ease-in"
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "ease-out",
    "description": "ease-out keyword",
    "category": "valid-keyword",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          "ease-out"
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "ease-in-out",
    "description": "ease-in-out keyword",
    "category": "valid-keyword",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          "ease-in-out"
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "step-start",
    "description": "step-start keyword",
    "category": "valid-keyword",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          "step-start"
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "step-end",
    "description": "step-end keyword",
    "category": "valid-keyword",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          "step-end"
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "EASE",
    "description": "case insensitive keyword",
    "category": "valid-keyword",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          "ease"
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "cubic-bezier(0, 0, 1, 1)",
    "description": "basic bezier",
    "category": "valid-bezier",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          {
            "type": "cubic-bezier",
            "x1": 0,
            "y1": 0,
            "x2": 1,
            "y2": 1
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "cubic-bezier(0.42, 0, 0.58, 1)",
    "description": "custom bezier",
    "category": "valid-bezier",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          {
            "type": "cubic-bezier",
            "x1": 0.42,
            "y1": 0,
            "x2": 0.58,
            "y2": 1
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "cubic-bezier(0, -2, 1, 3)",
    "description": "bezier with Y outside 0-1",
    "category": "valid-bezier",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          {
            "type": "cubic-bezier",
            "x1": 0,
            "y1": -2,
            "x2": 1,
            "y2": 3
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "cubic-bezier(0.25, 0.1, 0.25, 1)",
    "description": "ease bezier values",
    "category": "valid-bezier",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          {
            "type": "cubic-bezier",
            "x1": 0.25,
            "y1": 0.1,
            "x2": 0.25,
            "y2": 1
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "cubic-bezier(1, 0, 0, 1)",
    "description": "reverse bezier",
    "category": "valid-bezier",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          {
            "type": "cubic-bezier",
            "x1": 1,
            "y1": 0,
            "x2": 0,
            "y2": 1
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "steps(1)",
    "description": "single step",
    "category": "valid-steps",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          {
            "type": "steps",
            "steps": 1
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "steps(4)",
    "description": "multiple steps",
    "category": "valid-steps",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          {
            "type": "steps",
            "steps": 4
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "steps(4, jump-start)",
    "description": "steps with jump-start",
    "category": "valid-steps",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          {
            "type": "steps",
            "steps": 4,
            "position": "jump-start"
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "steps(10, jump-end)",
    "description": "steps with jump-end",
    "category": "valid-steps",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          {
            "type": "steps",
            "steps": 10,
            "position": "jump-end"
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "steps(5, jump-none)",
    "description": "steps with jump-none",
    "category": "valid-steps",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          {
            "type": "steps",
            "steps": 5,
            "position": "jump-none"
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "steps(3, jump-both)",
    "description": "steps with jump-both",
    "category": "valid-steps",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          {
            "type": "steps",
            "steps": 3,
            "position": "jump-both"
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "steps(2, start)",
    "description": "steps with legacy start",
    "category": "valid-steps",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          {
            "type": "steps",
            "steps": 2,
            "position": "start"
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "steps(2, end)",
    "description": "steps with legacy end",
    "category": "valid-steps",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          {
            "type": "steps",
            "steps": 2,
            "position": "end"
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "ease, linear",
    "description": "multiple keywords",
    "category": "valid-list",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          "ease",
          "linear"
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "ease-in, cubic-bezier(0, 0, 1, 1), steps(2)",
    "description": "mixed functions",
    "category": "valid-list",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          "ease-in",
          {
            "type": "cubic-bezier",
            "x1": 0,
            "y1": 0,
            "x2": 1,
            "y2": 1
          },
          {
            "type": "steps",
            "steps": 2
          }
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "ease , linear",
    "description": "list with whitespace",
    "category": "valid-list",
    "output": {
      "ok": true,
      "value": {
        "kind": "animation-timing-function",
        "functions": [
          "ease",
          "linear"
        ]
      }
    },
    "success": true,
    "expectValid": true
  },
  {
    "input": "cubic-bezier(-1, 0, 1, 1)",
    "description": "bezier X1 out of range",
    "category": "invalid-bezier",
    "output": {
      "ok": false,
      "error": "animation-timing-function: cubic-bezier validation failed: x1 Too small: expected number to be >=0"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: cubic-bezier validation failed: x1 Too small: expected number to be >=0"
  },
  {
    "input": "cubic-bezier(0, 0, 2, 1)",
    "description": "bezier X2 out of range",
    "category": "invalid-bezier",
    "output": {
      "ok": false,
      "error": "animation-timing-function: cubic-bezier validation failed: x2 Too big: expected number to be <=1"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: cubic-bezier validation failed: x2 Too big: expected number to be <=1"
  },
  {
    "input": "cubic-bezier(0.5, 0, 1.5, 1)",
    "description": "bezier X2 above 1",
    "category": "invalid-bezier",
    "output": {
      "ok": false,
      "error": "animation-timing-function: cubic-bezier validation failed: x2 Too big: expected number to be <=1"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: cubic-bezier validation failed: x2 Too big: expected number to be <=1"
  },
  {
    "input": "cubic-bezier(0, 0)",
    "description": "bezier missing arguments",
    "category": "invalid-bezier",
    "output": {
      "ok": false,
      "error": "animation-timing-function: cubic-bezier requires exactly 4 numbers, got 2"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: cubic-bezier requires exactly 4 numbers, got 2"
  },
  {
    "input": "cubic-bezier(0, 0, 1, 1, 0)",
    "description": "bezier too many arguments",
    "category": "invalid-bezier",
    "output": {
      "ok": false,
      "error": "animation-timing-function: cubic-bezier requires exactly 4 numbers, got 5"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: cubic-bezier requires exactly 4 numbers, got 5"
  },
  {
    "input": "steps(0)",
    "description": "zero steps",
    "category": "invalid-steps",
    "output": {
      "ok": false,
      "error": "animation-timing-function: steps() requires a positive integer, got 0"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: steps() requires a positive integer, got 0"
  },
  {
    "input": "steps(-1)",
    "description": "negative steps",
    "category": "invalid-steps",
    "output": {
      "ok": false,
      "error": "animation-timing-function: steps() requires a positive integer, got -1"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: steps() requires a positive integer, got -1"
  },
  {
    "input": "steps(1.5)",
    "description": "fractional steps",
    "category": "invalid-steps",
    "output": {
      "ok": false,
      "error": "animation-timing-function: steps() requires a positive integer, got 1.5"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: steps() requires a positive integer, got 1.5"
  },
  {
    "input": "steps()",
    "description": "steps missing argument",
    "category": "invalid-steps",
    "output": {
      "ok": false,
      "error": "animation-timing-function: steps() requires a step count"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: steps() requires a step count"
  },
  {
    "input": "steps(2, invalid)",
    "description": "steps invalid position",
    "category": "invalid-steps",
    "output": {
      "ok": false,
      "error": "animation-timing-function: Invalid step position keyword: invalid"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: Invalid step position keyword: invalid"
  },
  {
    "input": "invalid",
    "description": "invalid keyword",
    "category": "invalid-keyword",
    "output": {
      "ok": false,
      "error": "animation-timing-function: Invalid easing keyword: invalid"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: Invalid easing keyword: invalid"
  },
  {
    "input": "none",
    "description": "wrong keyword",
    "category": "invalid-keyword",
    "output": {
      "ok": false,
      "error": "animation-timing-function: Invalid easing keyword: none"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: Invalid easing keyword: none"
  },
  {
    "input": "",
    "description": "empty value",
    "category": "invalid-empty",
    "output": {
      "ok": false,
      "error": "animation-timing-function: Empty value"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: Empty value"
  },
  {
    "input": "ease,",
    "description": "trailing comma",
    "category": "invalid-comma",
    "output": {
      "ok": false,
      "error": "animation-timing-function: Empty value"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: Empty value"
  },
  {
    "input": ",ease",
    "description": "leading comma",
    "category": "invalid-comma",
    "output": {
      "ok": false,
      "error": "animation-timing-function: Empty value before comma"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: Empty value before comma"
  },
  {
    "input": "ease,,linear",
    "description": "double comma",
    "category": "invalid-comma",
    "output": {
      "ok": false,
      "error": "animation-timing-function: Empty value before comma"
    },
    "success": false,
    "expectValid": false,
    "expectedError": "animation-timing-function: Empty value before comma"
  }
]