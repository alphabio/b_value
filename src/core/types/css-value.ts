// b_path:: src/core/types/css-value.ts

/**
 * Union of all CSS value types that can be parsed/generated by b_value.
 *
 * This type represents the complete set of intermediate representations (IR)
 * for all supported CSS longhand properties. Used by `parseAll()` and `generateAll()`
 * for batch processing of CSS declarations.
 *
 * @module
 * @public
 */

import type * as Type from "./index";

/**
 * Union of all CSS value IR types supported by b_value.
 *
 * Includes all color, gradient, filter, transform, position, layout,
 * animation, transition, border, outline, and shadow value types.
 *
 * @example
 * ```typescript
 * import type { CSSValue } from "b_value";
 *
 * const color: CSSValue = { kind: "hex", value: "#FF0000" };
 * const length: CSSValue = { kind: "length", value: 10, unit: "px" };
 * ```
 *
 * @public
 */
export type CSSValue =
	// Color values
	| Type.HexColor
	| Type.RGBColor
	| Type.HSLColor
	| Type.HWBColor
	| Type.LABColor
	| Type.LCHColor
	| Type.OKLabColor
	| Type.OKLCHColor
	| Type.NamedColor
	| Type.ColorFunction
	// Clip-path values
	| Type.ClipPathCircle
	| Type.ClipPathEllipse
	| Type.ClipPathPolygon
	| Type.ClipPathInset
	| Type.ClipPathRect
	| Type.ClipPathXywh
	| Type.ClipPathPath
	| Type.ClipPathNone
	// Gradient values
	| Type.LinearGradient
	| Type.RadialGradient
	| Type.ConicGradient
	// Filter values
	| Type.FilterFunction
	// Shadow values
	| Type.BoxShadow
	| Type.TextShadow
	// Transform values
	| Type.Transform
	// Position values
	| Type.Position2D
	// Border values
	| Type.BorderWidth
	| Type.BorderStyle
	| Type.BorderColor
	| Type.BorderRadiusValue
	// Outline values
	| Type.OutlineWidthValue
	| Type.OutlineStyleValue
	| Type.OutlineColorValue
	| Type.OutlineOffsetValue
	// Animation values
	| Type.AnimationName
	| Type.AnimationDuration
	| Type.AnimationTimingFunction
	| Type.AnimationDelay
	| Type.AnimationIterationCount
	| Type.AnimationDirection
	| Type.AnimationFillMode
	| Type.AnimationPlayState
	// Transition values
	| Type.TransitionProperty
	| Type.TransitionDuration
	| Type.TransitionTimingFunction
	| Type.TransitionDelay
	// Layout values
	| Type.LengthPercentage
	| Type.Display
	| Type.PositionProperty
	| Type.OverflowX
	| Type.OverflowY
	| Type.ZIndex
	| Type.Width
	| Type.Height
	| Type.Top
	| Type.Right
	| Type.Bottom
	| Type.Left
	| Type.Opacity
	| Type.Visibility
	| Type.Cursor
	// Angle, Time primitives
	| Type.Angle
	| Type.Time;

/**
 * Type guard to check if a value is a CSSValue (parsed IR).
 *
 * @param value - Value to check
 * @returns True if value is a parsed CSS value (IR object with 'kind' field)
 *
 * @example
 * ```typescript
 * if (isCSSValue(value)) {
 *   console.log(value.kind); // Safe to access kind field
 * }
 * ```
 *
 * @public
 */
export function isCSSValue(value: unknown): value is CSSValue {
	return typeof value === "object" && value !== null && "kind" in value;
}

/**
 * Type guard to check if a value is an unparsed string.
 *
 * @param value - Value to check (CSSValue or string)
 * @returns True if value is a string (unparsed CSS)
 *
 * @example
 * ```typescript
 * if (isUnparsedString(value)) {
 *   console.log("Raw CSS:", value); // It's a string
 * }
 * ```
 *
 * @public
 */
export function isUnparsedString(value: CSSValue | string): value is string {
	return typeof value === "string";
}
